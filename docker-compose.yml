# ðŸŽ¯ TRANSCRITOR AVANÃ‡ADO - API FLASK
# Docker Compose para produÃ§Ã£o
# Inspirado em TranscreveAPI mas MUITO mais poderoso!

version: '3.8'

services:
  transcritor-api:
    build: .
    image: transcritor-api:latest
    container_name: transcritor-api-container
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      # Persiste transcriaÃ§Ãµes
      - ./transcricoes:/app/transcricoes
      # Logs opcionais
      - ./logs:/app/logs
    environment:
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Limites de recursos (ajustar conforme servidor)
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # ===== NGINX REVERSO (Opcional para produÃ§Ã£o) =====
  nginx:
    image: nginx:alpine
    container_name: transcritor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # Para SSL (se necessÃ¡rio)
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - transcritor-api
    profiles:
      - production

volumes:
  transcricoes:
    driver: local
  logs:
    driver: local

# ===== INSTRUÃ‡Ã•ES DE USO =====
#
# 1. DESENVOLVIMENTO:
#    docker-compose up --build
#
# 2. PRODUÃ‡ÃƒO (com nginx):
#    docker-compose --profile production up -d
#
# 3. APENAS API:
#    docker-compose up transcritor-api -d
#
# 4. LOGS:
#    docker-compose logs -f transcritor-api
#
# 5. PARAR:
#    docker-compose down
#
# 6. REBUILD:
#    docker-compose up --build --force-recreate
#
# ðŸš€ VANTAGENS sobre TranscreveAPI:
#    âœ… Deploy completo com nginx
#    âœ… Healthchecks automaticos
#    âœ… PersistÃªncia de dados
#    âœ… Restart automÃ¡tico
#    âœ… Limites de recursos
#    âœ… 100% offline 